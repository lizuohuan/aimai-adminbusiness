<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.magic.aimai.business.mapper.IEvaluateMapper">


    <select id="queryEvaluateById" resultType="com.magic.aimai.business.entity.Evaluate" >
        select * from evaluate e WHERE e.id = #{id}
    </select>

    <select id="queryEvaluate" resultType="com.magic.aimai.business.entity.Evaluate">
        SELECT
          e.*,u.showName AS userName,u.avatar AS avatar
        FROM evaluate e,users u
        WHERE
        e.userId = u.id
        <if test="curriculumId != null">
            AND e.curriculumId = #{curriculumId}
        </if>
        AND (e.isValid = 1
        <if test="userId != null">
            OR (e.userId = #{userId})
        </if>
        )
        <if test="userId != null">
            AND (SELECT cityId FROM users WHERE  id = u.id) = (SELECT cityId FROM  users WHERE id = #{userId})
        </if>
        ORDER BY e.id DESC
        <if test="limit != null and limitSize != null">
            LIMIT #{limit},#{limitSize}
        </if>
    </select>


    <insert id="addEvaluate" useGeneratedKeys="true" keyColumn="id" parameterType="com.magic.aimai.business.entity.Evaluate">
        INSERT INTO evaluate (userId, content, isValid, createTime,curriculumId)
        VALUES (#{userId}, #{content}, 0,now() ,#{curriculumId})
    </insert>

    <update id="updateEvaluate">
        UPDATE evaluate
        <set>
            <if test="evaluate.content != null">
                content = #{evaluate.content},
            </if>
            <if test="evaluate.isValid != null">
                isValid = #{evaluate.isValid},
            </if>
        </set>
        WHERE id = #{evaluate.id}
    </update>

    <select id="listForAdmin" resultType="com.magic.aimai.business.entity.Evaluate" parameterType="map">
        SELECT
        e.*,u.showName AS userName,c.curriculumName ,ci.mergerName AS cityName
        FROM evaluate e,users u ,curriculum c ,citys ci
        WHERE e.userId = u.id
        AND e.curriculumId = c.id
        AND c.cityId = ci.id
        <choose>
            <when test="districtId != null">
                AND c.cityId = #{districtId}
            </when>
            <otherwise>
                <choose>
                    <when test="cityId != null">
                        AND c.cityId IN (
                        SELECT #{cityId} AS id  UNION
                        SELECT ct2.id FROM citys ct2 WHERE ct2.parentId = #{cityId})
                    </when>
                    <otherwise>
                        <if test="provinceId != null">
                            AND c.cityId IN (
                            SELECT #{provinceId} AS id  UNION
                            SELECT ct2.id FROM citys ct2 WHERE ct2.parentId = #{provinceId} UNION
                            SELECT ct3.id FROM citys ct3 WHERE ct3.parentId IN (SELECT c3_1.id FROM citys c3_1 WHERE c3_1.parentId = #{provinceId}))
                        </if>
                    </otherwise>
                </choose>
            </otherwise>
        </choose>

        <if test="isValid != null">
            AND e.isValid = #{isValid}
        </if>
        <if test="userName != null and userName != ''">
            AND u.showName Like '%${userName}%'
        </if>
        <if test="curriculumName != null and curriculumName != ''">
            AND c.curriculumName Like '%${curriculumName}%'
        </if>
        <if test="startTime != null">
            AND e.createTime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null">
            AND e.createTime <![CDATA[ <= ]]> #{endTime}
        </if>
        ORDER BY
        <if test="pageArgs != null">
            <if test="pageArgs.column != null and pageArgs.column != ''">
                ${pageArgs.column} ${pageArgs.order},
            </if>
        </if>
        e.id DESC
        <if test="pageArgs != null">
            limit #{pageArgs.pageStart}, #{pageArgs.pageSize}
        </if>
    </select>


    <select id="listForAdminCount" resultType="java.lang.Integer" parameterType="map">
        SELECT
        COUNT(0)
        FROM evaluate e,users u ,curriculum c,citys ci
        WHERE e.userId = u.id
        AND e.curriculumId = c.id
        AND c.cityId = ci.id
        <choose>
            <when test="districtId != null">
                AND c.cityId = #{districtId}
            </when>
            <otherwise>
                <choose>
                    <when test="cityId != null">
                        AND c.cityId IN (
                        SELECT #{cityId} AS id  UNION
                        SELECT ct2.id FROM citys ct2 WHERE ct2.parentId = #{cityId})
                    </when>
                    <otherwise>
                        <if test="provinceId != null">
                            AND c.cityId IN (
                            SELECT #{provinceId} AS id  UNION
                            SELECT ct2.id FROM citys ct2 WHERE ct2.parentId = #{provinceId} UNION
                            SELECT ct3.id FROM citys ct3 WHERE ct3.parentId IN (SELECT c3_1.id FROM citys c3_1 WHERE c3_1.parentId = #{provinceId}))
                        </if>
                    </otherwise>
                </choose>
            </otherwise>
        </choose>
        <if test="isValid != null">
            AND e.isValid = #{isValid}
        </if>
        <if test="userName != null and userName != ''">
            AND u.showName Like '%${userName}%'
        </if>
        <if test="curriculumName != null and curriculumName != ''">
            AND c.curriculumName Like '%${curriculumName}%'
        </if>
        <if test="startTime != null">
            AND e.createTime <![CDATA[ >= ]]> #{startTime}
        </if>
        <if test="endTime != null">
            AND e.createTime <![CDATA[ <= ]]> #{endTime}
        </if>
    </select>

    <delete id="delete" >
        DELETE FROM evaluate WHERE id = #{id}
    </delete>

    <delete id="deleteList" >
        DELETE FROM evaluate WHERE id IN (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
    </delete>


    <update id="updateList">
        <foreach collection="list" separator=";" item="evaluate">
            UPDATE evaluate
            <set>
                <if test="evaluate.isValid != null">
                    isValid = #{evaluate.isValid},
                </if>
            </set>
            WHERE id = #{evaluate.id}
        </foreach>


    </update>
</mapper>